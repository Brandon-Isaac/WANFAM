name: Auto Assign PR Reviewers

on:
  pull_request:
    types: [opened, reopened, ready_for_review]

jobs:
  assign-reviewers:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Auto assign reviewers
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            const prAuthor = context.payload.pull_request.user.login;
            
            // Function to parse CODEOWNERS file and extract reviewers
            async function getCodeOwners() {
              try {
                const { data: codeownersFile } = await github.rest.repos.getContent({
                  owner,
                  repo,
                  path: '.github/CODEOWNERS'
                });
                
                const content = Buffer.from(codeownersFile.content, 'base64').toString();
                const lines = content.split('\n');
                const owners = new Set();
                
                for (const line of lines) {
                  const trimmedLine = line.trim();
                  if (trimmedLine && !trimmedLine.startsWith('#')) {
                    const parts = trimmedLine.split(/\s+/);
                    if (parts.length >= 2) {
                      // Extract usernames (remove @ prefix)
                      for (let i = 1; i < parts.length; i++) {
                        if (parts[i].startsWith('@') && !parts[i].includes('/')) {
                          owners.add(parts[i].substring(1));
                        }
                      }
                    }
                  }
                }
                
                return Array.from(owners);
              } catch (error) {
                console.log('Could not read CODEOWNERS file:', error.message);
                return [];
              }
            }
            
            // Function to get reviewers from repository variables
            async function getVariableReviewers() {
              try {
                const { data: variables } = await github.rest.actions.listRepoVariables({
                  owner,
                  repo
                });
                
                const reviewerVar = variables.variables.find(v => v.name === 'DEFAULT_REVIEWERS');
                if (reviewerVar) {
                  return reviewerVar.value.split(',').map(r => r.trim()).filter(r => r);
                }
              } catch (error) {
                console.log('Could not read repository variables:', error.message);
              }
              return [];
            }
            
            // Function to get max reviewers setting
            async function getMaxReviewers() {
              try {
                const { data: variables } = await github.rest.actions.listRepoVariables({
                  owner,
                  repo
                });
                
                const maxVar = variables.variables.find(v => v.name === 'MAX_REVIEWERS');
                if (maxVar) {
                  return parseInt(maxVar.value) || 2;
                }
              } catch (error) {
                console.log('Could not read MAX_REVIEWERS variable:', error.message);
              }
              return 2; // Default to 2 reviewers
            }
            
            // Get reviewers from multiple sources
            const codeOwners = await getCodeOwners();
            const variableReviewers = await getVariableReviewers();
            const maxReviewers = await getMaxReviewers();
            
            // Combine and deduplicate reviewers, exclude PR author
            const allReviewers = [...new Set([...codeOwners, ...variableReviewers])]
              .filter(reviewer => reviewer !== prAuthor);
            
            console.log(`Found potential reviewers: ${allReviewers.join(', ')}`);
            console.log(`Max reviewers to assign: ${maxReviewers}`);
            
            if (allReviewers.length > 0) {
              // Select reviewers up to the max limit
              const selectedReviewers = allReviewers.slice(0, maxReviewers);
              
              try {
                await github.rest.pulls.requestReviewers({
                  owner,
                  repo,
                  pull_number: prNumber,
                  reviewers: selectedReviewers
                });
                
                console.log(`✅ Requested reviews from: ${selectedReviewers.join(', ')}`);
              } catch (error) {
                console.log('❌ Failed to request reviewers:', error.message);
              }
            } else {
              console.log('⚠️ No reviewers found in CODEOWNERS or repository variables');
              console.log('💡 Set up reviewers by:');
              console.log('   1. Adding users to .github/CODEOWNERS file');
              console.log('   2. Running the "Setup Repository Variables" workflow');
            }

      - name: Add labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            
            // Auto-label based on changed files
            const { data: files } = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number: prNumber
            });
            
            const labels = [];
            
            const hasUserFiles = files.some(file => file.filename.startsWith('users/'));
            const hasFrontendFiles = files.some(file => file.filename.startsWith('frontend/'));
            const hasBackendFiles = files.some(file => file.filename.startsWith('backend/'));
            const hasDocFiles = files.some(file => file.filename.endsWith('.md'));
            
            if (hasUserFiles) labels.push('user-data');
            if (hasFrontendFiles) labels.push('frontend');
            if (hasBackendFiles) labels.push('backend');
            if (hasDocFiles) labels.push('documentation');
            
            if (labels.length > 0) {
              try {
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number: prNumber,
                  labels: labels
                });
                console.log(`Added labels: ${labels.join(', ')}`);
              } catch (error) {
                console.log('Failed to add labels:', error.message);
              }
            }
